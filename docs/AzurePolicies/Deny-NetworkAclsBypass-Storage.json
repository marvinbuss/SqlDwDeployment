{
  "type": "Microsoft.Authorization/policyDefinitions",
  "name": "Deny-NetworkAclsBypass-Storage",
  "properties": {
    "displayName": "Storage accounts should restrict the network ACL bypass option",
    "policyType": "Custom",
    "mode": "Indexed",
    "description": "Azure Storage accounts should restrict the bypass option for service-level network ACLs. Enforce this for increased data exfiltration protection.",
    "metadata": {
      "version": "1.0.0",
      "category": "Storage"
    },
    "parameters": {
      "effect": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "Enable or disable the execution of the policy"
        },
        "allowedValues": [
          "Deny",
          "Audit",
          "Disabled"
        ],
        "defaultValue": "Deny"
      },
      "allowedBypassOptions": {
        "type": "Array",
        "metadata": {
          "displayName": "Allowed Bypass Options",
          "description": "Specifies which options are allowed to bypass the vnet configuration"
        },
        "allowedValues": [
          "None",
          "Logging",
          "Metrics",
          "AzureServices",
          "Logging, Metrics",
          "Logging, AzureServices",
          "Metrics, AzureServices",
          "Logging, Metrics, AzureServices",
          "Logging, Metrics, AzureServices"
        ],
        "defaultValue": [
          "None",
          "AzureServices"
        ]
      }
    },
    "policyRule": {
      "if": {
        "allOf": [
          {
            "field": "type",
            "equals": "Microsoft.Storage/storageAccounts"
          },
          {
            "anyOf": [
              {
                "field": "Microsoft.Storage/storageAccounts/networkAcls.bypass",
                "exists": "false"
              },
              {
                "field": "Microsoft.Storage/storageAccounts/networkAcls.bypass",
                "notIn": "[parameters('allowedBypassOptions')]"
              }
            ]
          }
        ]
      },
      "then": {
        "effect": "[parameters('effect')]"
      }
    }
  }
}